AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  PROJECT:
    Type: String
  ENVIRONMENT:
    Type: String
  STRIPEPUBLISHABLEKEY:
    Type: String
  STRIPESECRETKEY:
    Type: String
  CONTENTFULSPACEID:
    Type: String
  CONTENTFULDELIVERYAPIACCESSTOKEN:
    Type: String
  MAILGUNAPIKEY:
    Type: String
  MAILGUNDOMAIN:
    Type: String

Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 30
    Handler: index.handler
    Environment:
      Variables:
        API_BASE_PATH: !Sub ${PROJECT}
        ENVIRONMENT: !Sub ${ENVIRONMENT}
        LOG_LEVEL: warn

Resources:
  # Api Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${PROJECT}-${ENVIRONMENT}
      StageName: !Ref ENVIRONMENT
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  BasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Sub ${PROJECT}
      DomainName: aws.triplehead.net
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGateway.Stage

  # Lambda Functions
  ApiHandlerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${PROJECT}-${ENVIRONMENT}
      CodeUri: dist/src/
      Handler: lambda.handler
      Environment:
        Variables:
          STRIPE_PUBLISHABLE_KEY: !Sub ${STRIPEPUBLISHABLEKEY}
          STRIPE_SECRET_KEY: !Sub ${STRIPESECRETKEY}
          CONTENTFUL_SPACE_ID: !Sub ${CONTENTFULSPACEID}
          CONTENTFUL_DELIVERY_API_ACCESS_TOKEN: !Sub ${CONTENTFULDELIVERYAPIACCESSTOKEN}
          MAILGUN_APIKEY: !Sub ${MAILGUNAPIKEY}
          MAILGUN_DOMAIN: !Sub ${MAILGUNDOMAIN}

      Events:
        HttpReqBase:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY
        HttpReqProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
      Policies:
        - Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:*:table/${PROJECT}-*-${ENVIRONMENT}

  ApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApiHandlerLambda}
      RetentionInDays: 365
