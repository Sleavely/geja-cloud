AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  PROJECT:
    Type: String
  ENVIRONMENT:
    Type: String
  STRIPEPUBLISHABLEKEY:
    Type: String
  STRIPESECRETKEY:
    Type: String
  STRIPEWEBHOOKSECRET:
    Type: String
  CONTENTFULSPACEID:
    Type: String
  CONTENTFULDELIVERYAPIACCESSTOKEN:
    Type: String

Mappings:
  dev:
    api:
      hostname: aws.triplehead.net
  prod:
    api:
      hostname: api.geja.se

Conditions:
  IsProd: !Equals [ !Ref ENVIRONMENT, prod ]

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 30
    Handler: index.handler
    Environment:
      Variables:
        API_BASE_PATH: !Sub ${PROJECT}
        ENVIRONMENT: !Sub ${ENVIRONMENT}
        LOG_LEVEL: warn
        PROJECT: !Sub ${PROJECT}

Resources:

  CartsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub ${PROJECT}-carts-${ENVIRONMENT}
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  OrderCreationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub GEJA Orders (${ENVIRONMENT})
      KmsMasterKeyId: alias/aws/sns

  # REST API
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${PROJECT}-${ENVIRONMENT}
      StageName: !Ref ENVIRONMENT
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  BasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !If
        - IsProd
        - AWS::NoValue
        - !Sub ${PROJECT}
      DomainName: !FindInMap [!Ref ENVIRONMENT, api, hostname]
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGateway.Stage

  ApiHandlerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${PROJECT}-api-${ENVIRONMENT}
      CodeUri: dist/src/
      Handler: apiHandler.handler
      Environment:
        Variables:
          STRIPE_PUBLISHABLE_KEY: !Sub ${STRIPEPUBLISHABLEKEY}
          STRIPE_SECRET_KEY: !Sub ${STRIPESECRETKEY}
          STRIPE_WEBHOOK_SECRET: !Sub ${STRIPEWEBHOOKSECRET}
          CONTENTFUL_SPACE_ID: !Sub ${CONTENTFULSPACEID}
          CONTENTFUL_DELIVERY_API_ACCESS_TOKEN: !Sub ${CONTENTFULDELIVERYAPIACCESSTOKEN}
          ORDERS_TOPIC_ARN: !Ref OrderCreationSNSTopic

      Events:
        HttpReqBase:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY
        HttpReqProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:*:table/${PROJECT}-*-${ENVIRONMENT}
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref OrderCreationSNSTopic

  ApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApiHandlerLambda}
      RetentionInDays: 365


  # Email confirmations
  EmailsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${PROJECT}-emails-${ENVIRONMENT}
      MessageRetentionPeriod: 1209600

  EmailsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
    - EmailsQueue
    Properties:
      Queues:
      - !Ref EmailsQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action:
          - sqs:SendMessage
          Resource: !GetAtt EmailsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref OrderCreationSNSTopic

  EmailsOrderCreationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt EmailsQueue.Arn
      Protocol: sqs
      RawMessageDelivery: false
      Region: !Sub ${AWS::Region}
      TopicArn: !Ref OrderCreationSNSTopic

  EmailsHandlerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${PROJECT}-emails-${ENVIRONMENT}
      CodeUri: dist/src/
      Handler: emailHandler.handler
      Events:
        EmailSqsEvents:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailsQueue.Arn
            BatchSize: 10
            Enabled: true
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:ChangeMessageVisibility
                - sqs:GetQueueAttributes
              Resource: !GetAtt EmailsQueue.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:*:table/${PROJECT}-*-${ENVIRONMENT}

  EmailsHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EmailsHandlerLambda}
      RetentionInDays: 365
